package hr.fer.oprpp1.custom.scripting.lexer;

/**
 * Token types that are generated by the Lexer in its different states.
 *
 * @author Ian Golob
 */
public enum TokenType {

    //Lexer state - TEXT
    /**
     * Document text (i.e. outside of tags).
     * The parser must accept only the following two escaping:
     * "\\" treated as '\',
     * "\{" treated as '{'.
     * Every other sequence which starts with \ should throw an exception.
     */
    TEXT,
    /**
     * The start of a tag.
     * "{$"
     */
    START_OF_TAG,
    /**
     * End of file.
     */
    EOF,


    //Lexer state - TAG_NAME
    /**
     * Tag name.
     * Valid tag names are “=”, or variable name.
     */
    TAG_NAME,


    //Lexer state - TAG
    /**
     * Variable.
     * Valid variable name starts by letter and after follows zero or more letters, digits or underscores. If name is
     * not valid, it is invalid. This variable names are valid: A7_bb, counter, tmp_34; these are not: _a21, 32,
     * 3s_ee etc.
     */
    VARIABLE,

    /**
     * Function.
     * Valid function name starts with @ after which follows a letter and after than can follow zero or more letters,
     * digits or underscores.
     */
    FUNCTION,

    /**
     * Operator.
     * Valid operators are + (plus), - (minus), * (multiplication), / (division), ^ (power).
     */
    OPERATOR,

    /**
     * Integer number.
     * Negative and positive integer numbers.
     * When deciding what to do with minus sign, treat it as a symbol if immediately after it there is no
     * digit. Only when immediately after it (no spaces between) a digit follows (lexer can check this!), treat it as
     * part of negative number.
     */
    INTEGER,

    /**
     * Decimal number.
     * Decimal numbers are only recognized in digits-dot-digits format, but not in scientific notation.
     * When deciding what to do with minus sign, treat it as a symbol if immediately after it there is no
     * digit. Only when immediately after it (no spaces between) a digit follows (lexer can check this!), treat it as
     * part of negative number.
     */
    DOUBLE,

    /**
     * String.
     * In strings which are part of tags (and only in strings!) parser must accept the following escaping:
     * "\\" sequence treat as a single string character '\',
     * "\"" treat as a single string character '"' (and not the end of the string),
     * "\n", "\r" and "\t" have its usual meaning (ascii 10, 13 and 9).
     * Every other sequence which starts with '\' should be treated as invalid and throw an exception.
     */
    STRING,

    /**
     * The end of the tag.
     * "$}"
     */
    END_OF_TAG,

}
